[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "py_rpn_calc"
dynamic = ["version"]
description = 'A Simple Python/Textual RPN Calculator'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["rpn", "calculator", "python", "mathematics"]
authors = [{ name = "Tammy Cravit", email = "tammy@tammymakesthings.com" }]
maintainers = [{ name = "Tammy Cravit", email = "tammy@tammymakesthings.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["click", "textual", "tomli"]

[project.urls]
Documentation = "https://github.com/tammymakesthings/py_rpn_calc#readme"
Issues = "https://github.com/tammymakesthings/py_rpn_calc/issues"
Source = "https://github.com/tammymakesthings/py_rpn_calc"

[tool.hatch.version]
path = "src/py_rpn_calc/__version__.py"

[tool.hatch.envs.types]
extra-dependencies = ["mypy>=1.0.0"]

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/py_rpn_calc tests}"

[tool.hatch.envs.hatch-test]
extra-dependencies = [
    "pytest-cov",
    "pytest-mock",
    "pytest-variables",
    "environs",
    "pytest-dotenv",
]
extra-args = ["--strict", "-np", "-vv"]

[tool.coverage.run]
source_pkgs = ["py_rpn_calc", "tests"]
branch = true
parallel = true
omit = ["src/py_rpn_calc/__about__.py"]

[tool.coverage.paths]
py_rpn_calc = ["src/py_rpn_calc", "*/py_rpn_calc/src/py_rpn_calc"]
tests = ["tests", "*/py_rpn_calc/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.pylint.main]
fail-under = 10
ignore = ["CVS"]
ignore-patterns = ["^\\.#"]
jobs = 1
limit-inference-results = 100
persistent = true
py-version = "3.10"
source-roots = ["src"]
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar", "baz", "quux", "garply"]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
class-rgx = "[A-Z][a-z]+"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"

[tool.pylint.classes]
# Warn about protected attribute access inside special methods
check-protected-access-in-special-methods = true
defining-attr-methods = [
    "__init__",
    "__new__",
    "setUp",
    "asyncSetUp",
    "__post_init__",
]
exclude-protected = [
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make",
    "os._exit",
]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
max-args = 10
max-attributes = 15
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 30
max-returns = 6
max-statements = 50
min-public-methods = 1

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
expected-line-ending-format = "LF"
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 88
max-module-lines = 1000

[tool.pylint.logging]
logging-format-style = "new"
logging-modules = ["logging"]

[tool.pylint."messages control"]
confidence = [
    "HIGH",
    "CONTROL_FLOW",
    "INFERENCE",
    "INFERENCE_FAILURE",
    "UNDEFINED",
]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-implicit-booleaness-not-comparison-to-string",
    "use-implicit-booleaness-not-comparison-to-zero",
    "use-symbolic-message-instead",
    "bare-except",
    "invalid-name",
]

[tool.pylint.method_args]
timeout-methods = [
    "requests.api.delete",
    "requests.api.get",
    "requests.api.head",
    "requests.api.options",
    "requests.api.patch",
    "requests.api.post",
    "requests.api.put",
    "requests.api.request",
]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO", "BUG"]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]
suggest-join-with-non-empty-separator = true

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = [
    "no-member",
    "not-async-context-manager",
    "not-context-manager",
    "attribute-defined-outside-init",
]
ignored-classes = [
    "optparse.Values",
    "thread._local",
    "_thread._local",
    "argparse.Namespace",
]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb", "_callback"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = [
    "six.moves",
    "past.builtins",
    "future.builtins",
    "builtins",
    "io",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.10"
strict = true
follow_imports = "silent"

[tool.isort]
src_paths = ["src", "tests"]
extend_skip = [".md", ".json"]
skip_gitignore = true
line_length = 88
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']
multi_line_output = 3
use_parentheses = true
combine_star = true
include_trailing_comma = true
